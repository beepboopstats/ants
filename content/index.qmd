---
title: "Statistics from SRA (ants)"
editor_options: 
  chunk_output_type: console
---

```{r}
dttm <- Sys.Date()

test <- FALSE
```


Last updated on `r dttm`.

---
# GOAL

This website is daily updated, and performs the following two steps:

1. use webscraping to pull tabular information from [Wikipedia page](https://en.wikipedia.org/wiki/List_of_ant_genera) to get a list of all ant genus.

2. use API calls to gather and visualize the number of datasets deposited in the [Sequence Read Archive (SRA) database](https://www.ncbi.nlm.nih.gov/sra) for each ant genus.


___

# Ant genus and relevant information

```{r}
library(rvest)
library(dplyr)
library(ggplot2)

# Specify the URL of the webpage
url <- "https://en.wikipedia.org/wiki/List_of_ant_genera"


tbl_genus <- read_html(url) |> 
  html_nodes(
    xpath = "//table[contains(@class, \'wikitable sortable\')]"
  ) |> 
  html_table(header = TRUE, fill = TRUE) |> 
  purrr::map_dfr(
    ~ .x |> 
      janitor::row_to_names(1)
  ) |> 
  janitor::clean_names() |> 
  mutate(
    across(
      everything(),
      ~ stringr::str_replace_all(
        .x,
        "â€ ",
        ""
      )
    ),
    no_of_species = as.integer(no_of_species)
  ) |>
  select(
    genus_name:type_species
  )

tbl_genus |> 
  arrange(desc(no_of_species)) |> 
  reactable::reactable(
    sortable = TRUE,
    resizable = TRUE,
    searchable = TRUE,
    filterable = TRUE,
    showPageSizeOptions = TRUE,
    columns = list(
      binomial_authority = reactable::colDef(minWidth = 120),
      type_species = reactable::colDef(minWidth = 190)
    )
  )

```

# Number of datasets in SRA

```{r}
# Specify genus
genus_names <- tbl_genus$genus_name |> unique()

if (test) {
  genus_names <- c("Camponotus", "Pogonomyrmex")
}
  
# for each genus name,
# - check the sra database to look for rnaseq datasets
npubs <- list()
for (i in 1:length(genus_names)) {
  
  db <- "sra"  # Sequence Read Archive (SRA) database
  query <- paste0(genus_names[i],
                  "[Organism] AND RNA-Seq[Strategy]")
  
  # Perform the search and fetch dataset IDs
  if(test) {
    how_many <- 10
  } else {
    how_many <- 10000
  }
  
  search_results <- rentrez::entrez_search(
    db, 
    term = query, 
    retmax = how_many
  )
  ids <- search_results$ids
  
  # how many unique datasets?
  npubs[[i]] <- length(ids)
  
}

genus.npubs <-
  data.frame(
    genus_name = genus_names,
    npubs = unlist(npubs)
  )

dat <- 
  genus.npubs |>
  # readRDS(
  #   "./ant_genus_rnaseq_datasets_7May23.Rds"
  # ) %>%
  as_tibble() |> 
  mutate(genus_name=as.character(genus_name)) %>% 
  mutate(genus_name2 = if_else(
    npubs < 10, "OTHER GENUS", genus_name)
  ) %>% 
  group_by(genus_name2) %>% 
  summarize(npubs = sum(npubs, na.rm = T)) %>% 
  arrange(npubs)


## Make table

dat |> 
  filter(
    npubs > 0
  ) |> 
  arrange(
    desc(npubs)
  ) |> 
  rename(
    `Genus Name` = genus_name2,
    `Number of SRA datasets found` = npubs
  ) |> 
  DT::datatable(
    caption = "Number of unique datasets in SRA database"
  )
```


## Distribution across ant genus

```{r fig.height=8, fig.width=6}
genus.lvls <- dat %>% pull(genus_name2)


p <- dat %>% 
  mutate(
    genus_name2 = factor(
      genus_name2, 
      levels = genus.lvls
    )
  ) %>% 
  ggplot(aes(x=genus_name2, y=npubs)) +
  # geom_col(fill="grey10", width = .4) +
  geom_histogram(
    stat = "identity",
    size=.5, 
    fill="grey60", 
    col="white"
  ) +
  scale_y_log10() +
  labs(
    x = "",
    y = "Unique datasets\nin SRA database"
  ) +
  theme_minimal(16) +
  coord_flip()
# theme(axis.title.x = element_blank())
# theme(axis.title.y = element_blank())

plotly::ggplotly(p)


```

